{"version":3,"sources":["scripts/main.js"],"names":["Grid","gridElement","cells","createCells","map","cell","index","Cell","Math","floor","randomIndex","random","emptyCells","length","filter","tile","reduce","cellGrid","x","y","cellElement","mergeTile","value","increase","newScore","score","scoreElement","textContent","showScoreIncrease","remove","newValue","winMessage","classList","gameWon","tileElement","add","_tile","_mergeTile","Tile","gameField","document","createElement","append","_value","v","_x","style","setProperty","_y","i","push","forEach","appendChild","gameBoard","querySelector","startButton","startMessage","loseMessage","grid","addEventListener","startGame","randomEmptyCell","removeEventListener","restartGame","setInput","scoreIncreaseQueue","displayNextScoreIncrease","scoreIncreaseElement","setTimeout","shift","querySelectorAll","innerHTML","window","handleImput","e","key","canMoveUp","moveUp","canMoveDown","moveDown","canMoveLeft","moveLeft","canMoveRight","moveRight","mergeTiles","newTile","slideTiles","cellsByColumn","column","reverse","cellsByRow","row","group","lastValidCell","j","moveToCell","canAccept","canMove","some"],"mappings":";AAAA,aA+XC,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA7XKA,IAAAA,EAAAA,WACQC,SAAAA,EAAAA,GAAa,EAAA,KAAA,GAClBC,KAAAA,MAAQC,EAAYF,GAAaG,IAAI,SAACC,EAAMC,GACxC,OAAA,IAAIC,EACTF,EACAC,EAAQ,EACRE,KAAKC,MAAMH,EAAQ,MAuX1B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,kBA5VmB,MAAA,WACVI,IAAAA,EAAcF,KAAKC,MAAMD,KAAKG,SAAW,KAAKC,WAAWC,QAExD,OAAA,KAAKD,WAAWF,KAyV1B,CAAA,IAAA,aAlXkB,IAAA,WACR,OAAA,KAAKR,MAAMY,OAAO,SAAAT,GAAQA,OAAc,OAAdA,EAAKU,SAiXzC,CAAA,IAAA,gBA9WqB,IAAA,WACX,OAAA,KAAKb,MAAMc,OAAO,SAACC,EAAUZ,GAI3BY,OAHPA,EAASZ,EAAKa,GAAKD,EAASZ,EAAKa,IAAM,GACvCD,EAASZ,EAAKa,GAAGb,EAAKc,GAAKd,EAEpBY,GACN,MAwWN,CAAA,IAAA,aArWkB,IAAA,WACR,OAAA,KAAKf,MAAMc,OAAO,SAACC,EAAUZ,GAI3BY,OAHPA,EAASZ,EAAKc,GAAKF,EAASZ,EAAKc,IAAM,GACvCF,EAASZ,EAAKc,GAAGd,EAAKa,GAAKb,EAEpBY,GACN,QA+VN,EA7XKjB,GAwCAO,EAAAA,WACQa,SAAAA,EAAAA,EAAaF,EAAGC,GAAGJ,IAAAA,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,KAAMM,EAAY,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,KAAM,EAAA,KAAA,GACvDD,KAAAA,YAAcA,EACdF,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EACJJ,KAAAA,KAAOA,EACPM,KAAAA,UAAYA,EA+UpB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YArTWN,MAAAA,SAAAA,GAEN,OAAc,OAAd,KAAKA,MACkB,OAAnB,KAAKM,WAAsB,KAAKN,KAAKO,QAAUP,EAAKO,QAkT7D,CAAA,IAAA,aA9Sc,MAAA,WACP,GAAc,OAAd,KAAKP,MAAoC,OAAnB,KAAKM,UAA3B,CAIEE,IAAAA,EAAW,KAAKR,KAAKO,MAAQ,KAAKD,UAAUC,MAC5CE,EAAWC,EAAQF,EAEzBE,EAAQD,EAERE,EAAaC,YAAcH,EAE3BI,EAAkBL,GAEbR,KAAAA,KAAKO,MAAQ,KAAKP,KAAKO,MAAQ,KAAKD,UAAUC,MAC9CD,KAAAA,UAAUQ,SACVR,KAAAA,UAAY,KAEXS,IAAAA,EAAW,KAAKf,KAAKO,MAEH,OAApB,KAAKP,KAAKO,QACZS,EAAWC,UAAUH,OAAO,UAC5BI,GAAU,GAGPlB,KAAAA,KAAKmB,YAAYF,UAAUH,OAAsBC,eAAAA,OAAAA,EAAW,IAC5Df,KAAAA,KAAKmB,YAAYF,UAAUG,IAAmBL,eAAAA,OAAAA,IAC9Cf,KAAAA,KAAKmB,YAAYP,YAAcG,KAmRvC,CAAA,IAAA,OA5UY,IAAA,WACF,OAAA,KAAKM,OAGLd,IAAAA,SAAAA,GACFc,KAAAA,MAAQd,EAEC,OAAVA,IAICc,KAAAA,MAAMlB,EAAI,KAAKA,EACfkB,KAAAA,MAAMjB,EAAI,KAAKA,KAgUvB,CAAA,IAAA,YA7TiB,IAAA,WACP,OAAA,KAAKkB,YAGAf,IAAAA,SAAAA,GACPe,KAAAA,WAAaf,MAwTrB,EArVKf,GAsEA+B,EAAAA,WACQC,SAAAA,EAAAA,GAAWjB,IAAAA,EAAQd,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,KAAKG,SAAW,GAAM,EAAI,EAAG,EAAA,KAAA,GACrDuB,KAAAA,YAAcM,SAASC,cAAc,OACrCP,KAAAA,YAAYF,UAAUG,IAAI,aAA6Bb,eAAAA,OAAAA,IAC5DiB,EAAUG,OAAO,KAAKR,aACjBZ,KAAAA,MAAQA,EA0QhB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SApPU,MAAA,WACFY,KAAAA,YAAYL,WAmPpB,CAAA,IAAA,QAvQa,IAAA,WACH,OAAA,KAAKc,QAGJC,IAAAA,SAAAA,GACHD,KAAAA,OAASC,EACTV,KAAAA,YAAYP,YAAciB,IAiQlC,CAAA,IAAA,IA9POtB,IAAAA,SAAAA,GACCuB,KAAAA,GAAKvB,EACLY,KAAAA,YAAYY,MAAMC,YAAY,OAAWzB,GAAAA,OAAS,GAATA,EAAoB,GAAlE,SA4PH,CAAA,IAAA,IAzPOA,IAAAA,SAAAA,GACC0B,KAAAA,GAAK1B,EACLY,KAAAA,YAAYY,MAAMC,YAAY,MAAUzB,GAAAA,OAAS,GAATA,EAAoB,GAAjE,WAuPH,EA/QKgB,GAgCN,SAASnC,EAAYF,GAGd,IAFCC,IAAAA,EAAQ,GAEL+C,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACrB5C,IAAAA,EAAOmC,SAASC,cAAc,OAEpCpC,EAAK2B,UAAUG,IAAI,cACnBjC,EAAMgD,KAAK7C,GAONH,OAJPA,EAAMiD,QAAQ,SAAC9C,GACbJ,EAAYmD,YAAY/C,KAGnBH,EAGT,IAAMmD,EAAYb,SAASc,cAAc,eACnCC,EAAcf,SAASc,cAAc,UACrCE,EAAehB,SAASc,cAAc,kBACtCG,EAAcjB,SAASc,cAAc,iBACrCvB,EAAaS,SAASc,cAAc,gBACtCI,EAAO,IAAI1D,EAAKqD,GAChB5B,EAAQ,EACRQ,GAAU,EAEdsB,EAAYI,iBAAiB,QAASC,GAEtC,IAAMlC,EAAec,SAASc,cAAc,eAE5C,SAASM,IACP3B,GAAU,EACVsB,EAAYvB,UAAUH,OAAO,SAC7B0B,EAAYvB,UAAUG,IAAI,WAC1BoB,EAAY5B,YAAc,UAC1B6B,EAAaxB,UAAUG,IAAI,UAE3BuB,EAAKG,kBAAkB9C,KAAO,IAAIuB,EAAKe,GACvCK,EAAKG,kBAAkB9C,KAAO,IAAIuB,EAAKe,GAEvCE,EAAYO,oBAAoB,QAASF,GACzCL,EAAYI,iBAAiB,QAASI,GACtCC,IAGF,IAAMC,EAAqB,GAE3B,SAASrC,EAAkBL,GACzB0C,EAAmBf,KAAK3B,GAEU,IAA9B0C,EAAmBpD,QACrBqD,IAIJ,SAASA,IACHD,GAA8B,IAA9BA,EAAmBpD,OAAnBoD,CAIE1C,IAAAA,EAAW0C,EAAmB,GAE9BE,EAAuB3B,SAASc,cAAc,mBAEpDa,EAAqBxC,YAAkBJ,IAAAA,OAAAA,GAEvC6C,WAAW,WACTD,EAAqBxC,YAAc,GACnCsC,EAAmBI,QACnBH,KACC,MAGL,SAASH,IACOvB,SAAS8B,iBAAiB,eAElCnB,QAAQ,SAAApC,GAAQA,OAAAA,EAAKc,WAE3BwB,EAAUkB,UAAY,IAEtBb,EAAO,IAAI1D,EAAKqD,IAEXQ,kBAAkB9C,KAAO,IAAIuB,EAAKe,GACvCK,EAAKG,kBAAkB9C,KAAO,IAAIuB,EAAKe,GAEvC5B,EAAQ,EACRQ,GAAU,EACVP,EAAaC,YAAcF,EAC3BM,EAAWC,UAAUG,IAAI,UACzBsB,EAAYzB,UAAUG,IAAI,UAG5B,SAAS6B,IACPQ,OAAOb,iBAAiB,UAAWc,GAGrC,SAASA,EAAYC,GACfzC,IAAAA,EAAAA,CAIIyC,OAAAA,EAAEC,KACH,IAAA,UACC,IAACC,IAGH,YAFAZ,IAKFa,IACA,MAEG,IAAA,YACC,IAACC,IAGH,YAFAd,IAIFe,IACA,MAEG,IAAA,YACC,IAACC,IAGH,YAFAhB,IAIFiB,IACA,MAEG,IAAA,aACC,IAACC,IAGH,YAFAlB,IAIFmB,IACA,MAEF,QAGE,YAFAnB,IAKJN,EAAKxD,MAAMiD,QAAQ,SAAA9C,GAAQA,OAAAA,EAAK+E,eAE1BC,IAAAA,EAAU,IAAI/C,EAAKe,GAEzBK,EAAKG,kBAAkB9C,KAAOsE,EAEzBT,KAAgBE,KACfE,KAAkBE,KACtBzB,EAAYzB,UAAUH,OAAO,UAG/BmC,KAGF,SAASa,IACAS,OAAAA,EAAW5B,EAAK6B,eAGzB,SAASR,IACAO,OAAAA,EAAW5B,EAAK6B,cAAcnF,IAAI,SAAAoF,GAAU,OAAA,EAAIA,GAAQC,aAGjE,SAASR,IACAK,OAAAA,EAAW5B,EAAKgC,YAGzB,SAASP,IACAG,OAAAA,EAAW5B,EAAKgC,WAAWtF,IAAI,SAAAuF,GAAO,OAAA,EAAIA,GAAKF,aAGxD,SAASH,EAAWpF,GAClBA,EAAMiD,QAAQ,SAAAyC,GACP,IAAA,IAAI3C,EAAI,EAAGA,EAAI2C,EAAM/E,OAAQoC,IAAK,CAC/B5C,IAAAA,EAAOuF,EAAM3C,GAEf5C,GAAc,OAAdA,EAAKU,KAALV,CAMC,IAFDwF,IAAAA,EAAgB,KAEXC,EAAI7C,EAAI,EAAG6C,GAAK,EAAGA,IAAK,CACzBC,IAAAA,EAAaH,EAAME,GAErB,IAACC,EAAWC,UAAU3F,EAAKU,MAC7B,MAEF8E,EAAgBE,EAGI,OAAlBF,IACyB,OAAvBA,EAAc9E,KAChB8E,EAAcxE,UAAYhB,EAAKU,KAE/B8E,EAAc9E,KAAOV,EAAKU,KAE5BV,EAAKU,KAAO,UAMpB,SAAS6D,IACAqB,OAAAA,EAAQvC,EAAK6B,eAGtB,SAAST,IACAmB,OAAAA,EAAQvC,EAAK6B,cAAcnF,IAAI,SAAAoF,GAAU,OAAA,EAAIA,GAAQC,aAG9D,SAAST,IACAiB,OAAAA,EAAQvC,EAAKgC,YAGtB,SAASR,IACAe,OAAAA,EAAQvC,EAAKgC,WAAWtF,IAAI,SAAAuF,GAAO,OAAA,EAAIA,GAAKF,aAGrD,SAASQ,EAAQ/F,GACRA,OAAAA,EAAMgG,KAAK,SAAAN,GACTA,OAAAA,EAAMM,KAAK,SAAC7F,EAAMC,GACnBA,OAAU,IAAVA,IAIc,OAAdD,EAAKU,MAIU6E,EAAMtF,EAAQ,GAEf0F,UAAU3F,EAAKU","file":"main.958bee2f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nclass Grid {\n  constructor(gridElement) {\n    this.cells = createCells(gridElement).map((cell, index) => {\n      return new Cell(\n        cell,\n        index % 4,\n        Math.floor(index / 4),\n      );\n    });\n  }\n\n  get emptyCells() {\n    return this.cells.filter(cell => cell.tile === null);\n  }\n\n  get cellsByColumn() {\n    return this.cells.reduce((cellGrid, cell) => {\n      cellGrid[cell.x] = cellGrid[cell.x] || [];\n      cellGrid[cell.x][cell.y] = cell;\n\n      return cellGrid;\n    }, []);\n  }\n\n  get cellsByRow() {\n    return this.cells.reduce((cellGrid, cell) => {\n      cellGrid[cell.y] = cellGrid[cell.y] || [];\n      cellGrid[cell.y][cell.x] = cell;\n\n      return cellGrid;\n    }, []);\n  }\n\n  randomEmptyCell() {\n    const randomIndex = Math.floor(Math.random() * this.emptyCells.length);\n\n    return this.emptyCells[randomIndex];\n  }\n}\n\nclass Cell {\n  constructor(cellElement, x, y, tile = null, mergeTile = null) {\n    this.cellElement = cellElement;\n    this.x = x;\n    this.y = y;\n    this.tile = tile;\n    this.mergeTile = mergeTile;\n  }\n\n  get tile() {\n    return this._tile;\n  }\n\n  set tile(value) {\n    this._tile = value;\n\n    if (value === null) {\n      return;\n    }\n\n    this._tile.x = this.x;\n    this._tile.y = this.y;\n  }\n\n  get mergeTile() {\n    return this._mergeTile;\n  }\n\n  set mergeTile(value) {\n    this._mergeTile = value;\n  }\n\n  canAccept(tile) {\n    return (\n      this.tile === null\n      || (this.mergeTile === null && this.tile.value === tile.value)\n    );\n  }\n\n  mergeTiles() {\n    if (this.tile === null || this.mergeTile === null) {\n      return;\n    }\n\n    const increase = this.tile.value + this.mergeTile.value;\n    const newScore = score + increase;\n\n    score = newScore;\n\n    scoreElement.textContent = newScore;\n\n    showScoreIncrease(increase);\n\n    this.tile.value = this.tile.value + this.mergeTile.value;\n    this.mergeTile.remove();\n    this.mergeTile = null;\n\n    const newValue = this.tile.value;\n\n    if (this.tile.value === 2048) {\n      winMessage.classList.remove('hidden');\n      gameWon = true;\n    }\n\n    this.tile.tileElement.classList.remove(`field-tile--${newValue / 2}`);\n    this.tile.tileElement.classList.add(`field-tile--${newValue}`);\n    this.tile.tileElement.textContent = newValue;\n  }\n}\n\nclass Tile {\n  constructor(gameField, value = Math.random() < 0.1 ? 4 : 2) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('field-tile', `field-tile--${value}`);\n    gameField.append(this.tileElement);\n    this.value = value;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(v) {\n    this._value = v;\n    this.tileElement.textContent = v;\n  }\n\n  set x(value) {\n    this._x = value;\n    this.tileElement.style.setProperty('left', `${value * (75 + 10) + 10}px`);\n  }\n\n  set y(value) {\n    this._y = value;\n    this.tileElement.style.setProperty('top', `${value * (75 + 10) + 10}px`);\n  }\n\n  remove() {\n    this.tileElement.remove();\n  }\n}\n\nfunction createCells(gridElement) {\n  const cells = [];\n\n  for (let i = 0; i < 16; i++) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('field-cell');\n    cells.push(cell);\n  }\n\n  cells.forEach((cell) => {\n    gridElement.appendChild(cell);\n  });\n\n  return cells;\n}\n\nconst gameBoard = document.querySelector('.game-field');\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nlet grid = new Grid(gameBoard);\nlet score = 0;\nlet gameWon = false;\n\nstartButton.addEventListener('click', startGame);\n\nconst scoreElement = document.querySelector('.game-score');\n\nfunction startGame() {\n  gameWon = false;\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  startButton.textContent = 'restart';\n  startMessage.classList.add('hidden');\n\n  grid.randomEmptyCell().tile = new Tile(gameBoard);\n  grid.randomEmptyCell().tile = new Tile(gameBoard);\n\n  startButton.removeEventListener('click', startGame);\n  startButton.addEventListener('click', restartGame);\n  setInput();\n}\n\nconst scoreIncreaseQueue = [];\n\nfunction showScoreIncrease(increase) {\n  scoreIncreaseQueue.push(increase);\n\n  if (scoreIncreaseQueue.length === 1) {\n    displayNextScoreIncrease();\n  }\n}\n\nfunction displayNextScoreIncrease() {\n  if (scoreIncreaseQueue.length === 0) {\n    return;\n  }\n\n  const increase = scoreIncreaseQueue[0];\n\n  const scoreIncreaseElement = document.querySelector('.score-increase');\n\n  scoreIncreaseElement.textContent = `+${increase}`;\n\n  setTimeout(() => {\n    scoreIncreaseElement.textContent = '';\n    scoreIncreaseQueue.shift();\n    displayNextScoreIncrease();\n  }, 300);\n}\n\nfunction restartGame() {\n  const tiles = document.querySelectorAll('.field-tile');\n\n  tiles.forEach(tile => tile.remove());\n\n  gameBoard.innerHTML = '';\n\n  grid = new Grid(gameBoard);\n\n  grid.randomEmptyCell().tile = new Tile(gameBoard);\n  grid.randomEmptyCell().tile = new Tile(gameBoard);\n\n  score = 0;\n  gameWon = false;\n  scoreElement.textContent = score;\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n}\n\nfunction setInput() {\n  window.addEventListener('keydown', handleImput);\n}\n\nfunction handleImput(e) {\n  if (gameWon) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowUp':\n      if (!canMoveUp()) {\n        setInput();\n\n        return;\n      }\n\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      if (!canMoveDown()) {\n        setInput();\n\n        return;\n      }\n      moveDown();\n      break;\n\n    case 'ArrowLeft':\n      if (!canMoveLeft()) {\n        setInput();\n\n        return;\n      }\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      if (!canMoveRight()) {\n        setInput();\n\n        return;\n      }\n      moveRight();\n      break;\n\n    default:\n      setInput();\n\n      return;\n  }\n\n  grid.cells.forEach(cell => cell.mergeTiles());\n\n  const newTile = new Tile(gameBoard);\n\n  grid.randomEmptyCell().tile = newTile;\n\n  if (!canMoveUp() && !canMoveDown()\n    && !canMoveLeft() && !canMoveRight()) {\n    loseMessage.classList.remove('hidden');\n  }\n\n  setInput();\n}\n\nfunction moveUp() {\n  return slideTiles(grid.cellsByColumn);\n}\n\nfunction moveDown() {\n  return slideTiles(grid.cellsByColumn.map(column => [...column].reverse()));\n}\n\nfunction moveLeft() {\n  return slideTiles(grid.cellsByRow);\n}\n\nfunction moveRight() {\n  return slideTiles(grid.cellsByRow.map(row => [...row].reverse()));\n}\n\nfunction slideTiles(cells) {\n  cells.forEach(group => {\n    for (let i = 1; i < group.length; i++) {\n      const cell = group[i];\n\n      if (cell.tile === null) {\n        continue;\n      }\n\n      let lastValidCell = null;\n\n      for (let j = i - 1; j >= 0; j--) {\n        const moveToCell = group[j];\n\n        if (!moveToCell.canAccept(cell.tile)) {\n          break;\n        }\n        lastValidCell = moveToCell;\n      }\n\n      if (lastValidCell !== null) {\n        if (lastValidCell.tile !== null) {\n          lastValidCell.mergeTile = cell.tile;\n        } else {\n          lastValidCell.tile = cell.tile;\n        }\n        cell.tile = null;\n      }\n    }\n  });\n}\n\nfunction canMoveUp() {\n  return canMove(grid.cellsByColumn);\n};\n\nfunction canMoveDown() {\n  return canMove(grid.cellsByColumn.map(column => [...column].reverse()));\n};\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsByRow);\n};\n\nfunction canMoveRight() {\n  return canMove(grid.cellsByRow.map(row => [...row].reverse()));\n};\n\nfunction canMove(cells) {\n  return cells.some(group => {\n    return group.some((cell, index) => {\n      if (index === 0) {\n        return false;\n      }\n\n      if (cell.tile === null) {\n        return false;\n      }\n\n      const moveToCell = group[index - 1];\n\n      return moveToCell.canAccept(cell.tile);\n    });\n  });\n}\n"]}